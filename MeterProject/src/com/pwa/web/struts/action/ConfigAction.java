/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.pwa.web.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;

import com.pwa.common.MessageList;
import com.pwa.data.model.config.Config;
import com.pwa.data.model.config.ConfigDAO;
import com.pwa.web.ScreenMsgUtil;
import com.pwa.web.helper.ServletContextHelper;
import com.pwa.web.struts.form.ConfigForm;

/**
 * MyEclipse Struts Creation date: 01-15-2552
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/config" name="configForm" input="/config.jsp" parameter="act"
 * @struts.action-forward name="success" path="/config.jsp"
 * @struts.action-forward name="main" path="/config.jsp"
 */
public class ConfigAction extends ImportMasterDataAction {

	@Override
	public ActionForward main(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws UnsupportedEncodingException {

		HttpSession session = request.getSession();
		ConfigForm f = (ConfigForm) form;
		MessageList msgList = new MessageList();

		// load data to form
		ConfigDAO dao = new ConfigDAO();
		try {
			List l = dao.findAll();
			if (!l.isEmpty()) {
				Config config = (Config) l.get(0);
				f.setBr(config.getBr());
				f.setHead(config.getHead());
				f.setTelno(config.getTelno());
				f.setLowtype1(config.getLowtype1());
				f.setLowtype2(config.getLowtype2());
				f.setLowtype3(config.getLowtype3());
				f.setBankdate(config.getBankdate());
				f.setPaydate(config.getPaydate());
			}
		} catch (Exception e) {
			msgList.addMessage(e);
		} finally {
			dao.getSession().close();
		}
		ActionForward forward = null;
		forward = mapping.findForward("main");
		saveMessages(request, ScreenMsgUtil.getMsgsToScreen(msgList));

		return forward;
	}

	@Override
	public ActionForward submit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IOException, ParseException {
		HttpSession session = request.getSession();
		ConfigForm f = (ConfigForm) form;
		MessageList msgList = new MessageList();

		// update data
		ConfigDAO dao = new ConfigDAO();
		Transaction tx = null;
		try {
			tx = dao.getSession().beginTransaction();
			Config config = null;
			List l = dao.findAll();
			if (!l.isEmpty()) {
				config = (Config) l.get(0); // get
				dao.delete(config); // delete old
			}
			config = new Config(); // insert
			config.setBr(f.getBr());
			config.setHead(f.getHead());
			config.setTelno(f.getTelno());
			config.setLowtype1(f.getLowtype1());
			config.setLowtype2(f.getLowtype2());
			config.setLowtype3(f.getLowtype3());
			config.setBankdate(f.getBankdate());
			config.setPaydate(f.getPaydate());

			dao.save(config);
			tx.commit();
			msgList.addMessage("I", "Update ข้อมูลสำเร็จ" );
			// update context
			ServletContextHelper.initContext(servlet.getServletContext());
			
		} catch (Exception e) {
			msgList.addMessage(e);
			tx.rollback();
			e.printStackTrace();

		} finally {
			dao.getSession().close();
		}

		ActionForward forward = null;
		if (!msgList.isContainError()) {
			forward = mapping.findForward("success");
		} else {
			forward = mapping.findForward("main");
		}
		saveMessages(request, ScreenMsgUtil.getMsgsToScreen(msgList));
		return forward;
	}

}