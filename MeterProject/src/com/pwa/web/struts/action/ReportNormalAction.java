/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.pwa.web.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.TreeMap;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.PairValueDesc;
import com.pwa.common.CUtil;
import com.pwa.common.DateUtil;
import com.pwa.common.MessageList;
import com.pwa.common.Meter;
import com.pwa.common.exception.CMException;
import com.pwa.data.DBHelper;
import com.pwa.web.ScreenMsgUtil;
import com.pwa.web.helper.ReportHelper;
import com.pwa.web.helper.WebUtil;
import com.pwa.web.struts.form.ReportNormalForm;
import com.pwa.web.view.ReportNormalViewPaging;

public class ReportNormalAction extends ReportBaseAction {
	public static Logger log = Logger.getLogger(ReportNormalAction.class);

	public ActionForward main(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		ReportNormalForm f = (ReportNormalForm) form;
		log.debug("enter ");

		// set current date
		if (CUtil.isBlank(f.getDateStr())) {
			f.setDateStr(DateUtil.formatLongThaiDate(new Date()));
		}
		if (CUtil.isBlank(f.getDatetoStr())) {
			f.setDatetoStr(DateUtil.formatLongThaiDate(new Date()));
		}

		// lookup List
		ArrayList<PairValueDesc> codeIDList = WebUtil.getCodeIDList((String)session.getAttribute("br"));
		session.setAttribute("codeIDList", codeIDList);
		ArrayList<PairValueDesc> commentList = WebUtil.getCommentList();
		session.setAttribute("commentList", commentList);
		ArrayList<PairValueDesc> billFlagList = WebUtil.getBillFlagList();
		session.setAttribute("billFlagList", billFlagList);
		session.setAttribute("type", WebUtil.getURIParam(request, "type"));
		return mapping.findForward("main");
	}

	public ActionForward submit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IOException, ServletException {

		HttpSession session = request.getSession();
		String br = (String) session.getAttribute("br");
		ReportNormalForm f = (ReportNormalForm) form;
		//f.setBr(br);
		MessageList msgList = new MessageList();
		log.debug("enter type" + (String) session.getAttribute("type"));
		try {
			ReportHelper.decodeISOForm(mapping, form, request, response);
			TreeMap c = getReportCriteriaANdValidate(f);
			session.setAttribute("reportCriteria", c);  // store to refresh later
			ArrayList reportViewList = getReportViewList(c, (String) session.getAttribute("type"),br);

			// make paging
			ReportNormalViewPaging p = new ReportNormalViewPaging();
			p.load(reportViewList);
			session.setAttribute("pageObj", p);

			session.setAttribute("reportViewList", reportViewList);
		} catch (Exception e) {
			msgList.addMessage(e);
			e.printStackTrace();
		}

		ActionForward forward = null;
		if (!msgList.isContainError()) {
			forward = mapping.findForward("success");
		} else {
			forward = mapping.findForward("main");
		}
		saveMessages(request, ScreenMsgUtil.getMsgsToScreen(msgList));
		return forward;
	}

	public static TreeMap getReportCriteriaANdValidate(ReportNormalForm f) throws Exception {
		TreeMap c = new TreeMap();

		String codeid = f.getCodeid();
		String rte = f.getRte();
		String trandateStr = f.getDateStr();

		String billflag = f.getBillflag();
		String readflag = f.getReadflag();
		String comment = f.getComment();
		String br = f.getBr();
		log.debug("rte=" + rte + ", codeid=" + codeid + ", trandateStr=" + trandateStr + ", billflag=" + billflag + ", comment=" + comment
				+ ", readflag=" + readflag+", br ="+br);
		codeid = CUtil.getNullIfEmpty(codeid);
		rte = CUtil.getNullIfEmpty(rte);
		trandateStr = CUtil.getNullIfEmpty(trandateStr);
		billflag = CUtil.getNullIfEmpty(billflag);
		readflag = CUtil.getNullIfEmpty(readflag);
		comment = CUtil.getNullIfEmpty(comment);
		br = CUtil.getNullIfEmpty(br);

		String todateStr = f.getDatetoStr();
		todateStr = CUtil.getNullIfEmpty(todateStr);
		log.debug("todateStr=" + todateStr);

		Date trandate = DateUtil.parseThaiDate(trandateStr); // be search match or startdate criteria
		Date todate = DateUtil.parseThaiDate(todateStr);

		// validate input
		if (todate != null && trandate.after(todate)) {
			throw new CMException("E", "กรุณาเลือกวันที่ให้ถูกต้อง" );
		}

		DBHelper.putToCriIfNotNull(c, "codeid", codeid);
		DBHelper.putToCriIfNotNull(c, "rte", rte);
		DBHelper.putToCriIfNotNull(c, "billflag", billflag);
		DBHelper.putToCriIfNotNull(c, "comment", comment);
		DBHelper.putToCriIfNotNull(c, "readflag", readflag);
		DBHelper.putToCriIfNotNull(c, "br", br);
		if (todate == null) { // search match
			DBHelper.putToCriIfNotNull(c, "trandate", trandate);
		} else { // search range
			DBHelper.putToCriIfNotNull(c, "trandate", new Date[] { trandate, todate });
		}
		return c;
	}

	protected ArrayList getReportViewList(TreeMap c, String type,String br) throws Exception {
		ArrayList r = new ArrayList();
		Meter m = new Meter();
		if ("1".equals(type)) {
			r = getReportNormalViewList(c,br);
		}
		if ("2".equals(type)) {
			r = getReportCompanyViewList(c,br);
		}
		if ("3".equals(type)) {
			r = getReportPWAViewList(c,br);
		}
		log.debug(m.took());
		return r;
	}

	// อ่านมาตรปกติ: เอาไม่เกิน 1 วัน
	protected ArrayList getReportNormalViewList(TreeMap c,String br) throws Exception {
		ArrayList r = new ArrayList();
		String sql = "";
		sql += "SELECT * ";
		sql += "FROM detail d INNER JOIN dbst44 db44 ON d.type = '1' AND d.codeid = db44.mtrrdrcode AND d.br = "+br+" ";
		sql += "WHERE ((readflag = '0' ) OR (readflag = '1' AND datediff(prsmtrrddt, trandate) < 1)) ";
		sql += DBHelper.getAndIfCond(DBHelper.getConStr(c, false));
		sql += " ORDER BY trandate, codeid, rte,PRSMTRRDDTD,TIME, cast(seq as decimal) ";
		ReportHelper.getReportNormalViewList(sql, c, r);

		return r;
	}

	// เก็บตกบริษัท: ค้างเกิน 1 ที่เหลือ clear ก่อนแล้วใน reportbaseaction
	protected ArrayList getReportCompanyViewList(TreeMap c,String br) throws Exception {
		ArrayList r = new ArrayList();
		String sql = "";
		sql += "SELECT * ";
		sql += "FROM detail d INNER JOIN dbst44 db44 ON d.type = '1' AND d.codeid = db44.mtrrdrcode AND d.br = "+br+" ";
		sql += "WHERE ((readflag='0' and datediff(curdate(), trandate)  >= 1) OR (readflag='1' and datediff(prsmtrrddt, trandate)  >= 1  )) ";
		sql += DBHelper.getAndIfCond(DBHelper.getConStr(c, false));
		sql += " ORDER BY trandate, codeid, rte, cast(seq as decimal) ";
		ReportHelper.getReportNormalViewList(sql, c, r);

		return r;
	}

	// เก็บตกประปา
	protected ArrayList getReportPWAViewList(TreeMap c,String br) throws Exception {
		ArrayList r = new ArrayList();
		String sql = "";
		sql += "SELECT * ";
		sql += "FROM detail d INNER JOIN dbst44 db44 ON d.codeid = db44.mtrrdrcode AND d.br = "+br+" ";
		sql += "WHERE d.type = '2' ";
		sql += DBHelper.getAndIfCond(DBHelper.getConStr(c, false));
		sql += " ORDER BY trandate, codeid, rte, cast(seq as decimal) ";
		ReportHelper.getReportNormalViewList(sql, c, r);

		return r;
	}

	public void refreshPag(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		TreeMap c = (TreeMap) session.getAttribute("reportCriteria");
		ArrayList reportViewList = getReportViewList(c, (String) session.getAttribute("type"),(String)session.getAttribute("br")); // re-search
		ReportNormalViewPaging p = new ReportNormalViewPaging();
		p.load(reportViewList);
		session.setAttribute("pageObj", p);
	}



}