/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.pwa.web.struts.action;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import com.PairValueDesc;
import com.pwa.common.CUtil;
import com.pwa.common.DateUtil;
import com.pwa.common.Env;
import com.pwa.common.FileUtil;
import com.pwa.common.MessageList;
import com.pwa.common.Meter;
import com.pwa.common.exception.CMException;
import com.pwa.data.impoter.AssignAllImporter;
import com.pwa.data.impoter.AssignImporter;
import com.pwa.data.model.head.Head;
import com.pwa.web.ScreenMsgUtil;
import com.pwa.web.helper.WebUtil;
import com.pwa.web.struts.form.AssignForm;

public class AssignAction extends BaseAction {
	public static Logger log = Logger.getLogger(AssignAction.class);

	public ActionForward main(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		AssignForm f = (AssignForm) form;
		String type = WebUtil.getURIParam(request, "type");
		log.debug("enter " + type);
		session.setAttribute("type", type);

		if (CUtil.isBlank(f.getDateStr())) {
			f.setDateStr(DateUtil.formatLongThaiDate(new Date()));
		}
		// lookup List
		ArrayList<PairValueDesc> codeIDList = WebUtil.getCodeIDList((String)session.getAttribute("br"));
		session.setAttribute("codeIDList", codeIDList);
		return mapping.findForward("main");
	}

	public ActionForward submit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		AssignForm f = (AssignForm) form;
		MessageList msgList = new MessageList();
		Meter m = new Meter();
		WebUtil.setupDefaultProgressManager(session); // setup progress
		
		String type = (String) session.getAttribute("type");
		log.debug("enter " + type);
		String trandateStr = f.getDateStr();
		log.debug("date= " + trandateStr);
		String codeId = f.getCodeid();
		log.debug("codeId= " + codeId);

		// Process the FormFile save and import
		FormFile formFile = f.getAssignFile();
		try {
			Date tranDate = DateUtil.parseThaiDate(trandateStr);

			// validate input
			if (tranDate == null) {
				throw new CMException("E",  "กรุณาเลือกวันที่" );
			}
			// validate input
			if (codeId == null || "".equals(codeId)) {
				 throw new CMException("E",  "กรุณาเลือกพนักงาน" );
				}			
//			Date nowDate = new Date(System.currentTimeMillis());
//			if (DateUtil.getDateDiff(nowDate, tranDate) > 1 && "1".equals(type)) {
//				throw new CMException("E",  "ไม่สามารถมอบหมายเส้นทางเก็บตกบริษัทได้เกิน 1 วัน" );
//			}

			WebUtil.validateFileInfo(formFile);
			String fileName = formFile.getFileName();
			byte[] fileData = formFile.getFileData();
			// log.debug(new String(fileData));

			fileName = FileUtil.changeFileName(fileName);
			File importFile = FileUtil.createFile(Env.get("meter.datadir") + "/input/" + fileName, fileData);

			long rowEffect = AssignImporter.run(type, importFile.getAbsolutePath(), tranDate,codeId, msgList);
			msgList.addFirstMessage("I", "มอบหมายเส้นทางวันที่" + DateUtil.formatThaiDate(tranDate) + " สำเร็จทั้งหมด" + rowEffect + " รายการ");
		} catch (CMException e) {
			msgList.addMessage(e);
		} catch (Exception e) {
			msgList.addMessage(e);
			e.printStackTrace();
		}finally{
			log.debug(m.took());
			WebUtil.removeProgressManager(session);
		}
		ActionForward forward = null;
		if (!msgList.isContainError()) {
			forward = mapping.findForward("success");
		} else {
			forward = mapping.findForward("main");
		}
		saveMessages(request, ScreenMsgUtil.getMsgsToScreen(msgList));
		return forward;
	}
	@SuppressWarnings("deprecation")
	public ActionForward submitAll(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		AssignForm f = (AssignForm) form;
		MessageList msgList = new MessageList();
		Meter m = new Meter();
		WebUtil.setupDefaultProgressManager(session); // setup progress
		
		String type = (String) session.getAttribute("type");
		String br = (String) session.getAttribute("br");
		log.debug("enter " + type);
		String trandateStr = f.getDateStr();
		log.debug("date= " + trandateStr);
		ActionForward forward = null;
		Date tranDate = DateUtil.parseThaiDate(trandateStr); 
		log.debug("dateOnly= " + tranDate.getDate());
		int date = tranDate.getDate();
		
		try {
		List<Head> headList = AssignAllImporter.getHeadByDate(String.valueOf(date),br,msgList);
		//String path = "d://Meter//wattana//";
		//String path = "/home/jbspro/pwa1/watthana/IN/DATA/";
		//String path = "/home/jbspro/domains/jbsprosmart.com/public_html/pwa1/watthana/IN/DATA/";
        String branch = (String)session.getServletContext().getAttribute("br");
		String path = Env.get(branch+".IN");
		//String path = Env.get("localhost.IN");
		//System.out.println("path = "+path);
		for(Head head : headList){
			System.out.println("BR Head : "+head.getBr());
			System.out.println("RTE Head : "+head.getRte());
			System.out.println("READID Head : "+head.getReaderid());
			System.out.println("AssignDate Head : "+head.getAssigndate());
			String absolutePath = path+head.getRte()+".TXT";
			long rowEffect = AssignImporter.run(type, absolutePath, tranDate,head.getReaderid(), msgList);
			msgList.addFirstMessage("I", "มอบหมายเส้นทางวันที่" + DateUtil.formatThaiDate(tranDate) + " สำเร็จทั้งหมด" + rowEffect + " รายการ");
		}
		} catch (CMException e) {
			msgList.addMessage(e);
		} catch (Exception e) {
			msgList.addMessage(e);
			e.printStackTrace();
		}finally{
			log.debug(m.took());
			WebUtil.removeProgressManager(session);
		}
		if (!msgList.isContainError()) {
			forward = mapping.findForward("success");
		} else {
			forward = mapping.findForward("main");
		}
		saveMessages(request, ScreenMsgUtil.getMsgsToScreen(msgList));
		return forward;
	}

}