/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.pwa.web.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.TreeMap;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.PairValueDesc;
import com.pwa.common.CUtil;
import com.pwa.common.DateUtil;
import com.pwa.common.MessageList;
import com.pwa.common.Meter;
import com.pwa.common.exception.CMException;
import com.pwa.data.DBHelper;
import com.pwa.web.Paging;
import com.pwa.web.ScreenMsgUtil;
import com.pwa.web.helper.ReportHelper;
import com.pwa.web.helper.WebUtil;
import com.pwa.web.struts.form.ReportSummaryForm;
import com.pwa.web.view.ReportNormalViewPaging;
import com.pwa.web.view.ReportSummaryViewPaging;

public class ReportSummaryAction extends ReportBaseAction {
	public static Logger log = Logger.getLogger(ReportSummaryAction.class);

	public ActionForward main(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		ReportSummaryForm f = (ReportSummaryForm) form;
		log.debug("enter ");

		// set current date
		if (CUtil.isBlank(f.getDateStr())) {
			f.setDateStr(DateUtil.formatLongThaiDate(new Date()));
		}
		if (CUtil.isBlank(f.getDatetoStr())) {
			f.setDatetoStr(DateUtil.formatLongThaiDate(new Date()));
		}
		// lookup List
		ArrayList<PairValueDesc> codeIDList = WebUtil.getCodeIDList((String)session.getAttribute("br"));
		session.setAttribute("codeIDList", codeIDList);
		ArrayList<PairValueDesc> commentList = WebUtil.getCommentList();
		session.setAttribute("commentList", commentList);
		ArrayList<PairValueDesc> billFlagList = WebUtil.getBillFlagList();
		session.setAttribute("billFlagList", billFlagList);
		return mapping.findForward("main");
	}

	// prepare type and redirect to normal submit action
	public ActionForward submitToNormal(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IOException, ServletException, ParseException {
		HttpSession session = request.getSession();
		ReportSummaryForm f = (ReportSummaryForm) form;
		log.debug("enter");
		session.setAttribute("type", request.getParameter("reportType")); // report type normal

		String paramSent = request.getQueryString();
		// String paramSent = WebUtil.getURIQueryStr(request);
		String newParam = paramSent.replaceAll("act=submitToNormal", "");
		String qStr = "act=submit" + newParam;
		log.debug(qStr);
		ActionForward forward = new ActionForward();
		forward.setPath("/reportNormal.do?" + qStr);
		forward.setRedirect(true);

		return forward;
	}

	public ActionForward submit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IOException, ServletException, ParseException {
		HttpSession session = request.getSession();
		String br = (String)session.getAttribute("br");
		ReportSummaryForm f = (ReportSummaryForm) form;
		f.setBr(br);
		MessageList msgList = new MessageList();
		log.debug("enter");
		try {
			ReportHelper.decodeISOForm(mapping, form, request, response);
			TreeMap c = getReportCriteriaAndValidate(f);
			session.setAttribute("reportSummaryCriteria", c); // store to refresh

			ArrayList reportViewList = getReportViewList(c,br);

			ReportSummaryViewPaging p = new ReportSummaryViewPaging();
			p.load(reportViewList);
			session.setAttribute("pageObj", p);
			session.setAttribute("summaryPageObj", p); // temp to swap for paging

			session.setAttribute("reportViewList", reportViewList);
		} catch (Exception e) {
			msgList.addMessage(e);
			e.printStackTrace();
		}

		ActionForward forward = null;
		if (!msgList.isContainError()) {
			forward = mapping.findForward("success");
		} else {
			forward = mapping.findForward("main");
		}
		saveMessages(request, ScreenMsgUtil.getMsgsToScreen(msgList));
		return forward;
	}

	public static TreeMap getReportCriteriaAndValidate(ReportSummaryForm f) throws Exception {
		TreeMap c = new TreeMap();
		String rte = f.getRte();
		String codeid = f.getCodeid();

		String startdateStr = f.getDateStr();
		String todateStr = f.getDatetoStr();
		String br = f.getBr();
		log.debug("startdateStr=" + startdateStr + ", todateStr=" + todateStr);
		log.debug("rte=" + rte + ", codeid=" + codeid+ ", br=" + br);
		rte = CUtil.getNullIfEmpty(rte);
		codeid = CUtil.getNullIfEmpty(codeid);

		// validate input
		if (CUtil.isBlank(startdateStr) || CUtil.isBlank(todateStr)) {
			throw new CMException("E", "กรุณาเลือกวันที่ให้ครบ" );
		}
		Date startdate = DateUtil.parseThaiDate(startdateStr);
		Date todate = DateUtil.parseThaiDate(todateStr);
		if (startdate.after(todate)) {
			throw new CMException("E",  "กรุณาเลือกวันที่ให้ถูกต้อง" );
		}

		DBHelper.putToCriIfNotNull(c, "rte", rte);
		DBHelper.putToCriIfNotNull(c, "codeid", codeid);
		DBHelper.putToCriIfNotNull(c, "trandate", new Date[] { startdate, todate });
		DBHelper.putToCriIfNotNull(c, "br", br);
		return c;
	}

	// เพิ่ม group by ประเภทรายการ
	private ArrayList getReportViewList(TreeMap<String, Object> c,String br) throws Exception {
		ArrayList r = new ArrayList();
		Meter m = new Meter();
		String sql = "";
		sql += "SELECT codeid, ";
		sql += "       br, ";
		sql += "       trandate, ";
		sql += "       rte, ";
		sql += "       type, ";
		sql += "       comment, ";
		sql += "       count(custcode) AS custcount, ";
		sql += "       (SELECT count( * ) ";
		sql += "        FROM detail d1 ";
		sql += "        WHERE (d.trandate = d1.trandate AND d.rte = d1.rte ) AND d1.readflag = '1' and d1.BR = "+br+" )  ";
		sql += "          AS savecount, ";
		sql += "       (SELECT count( * ) ";
		sql += "        FROM detail d1 ";
		sql += "        WHERE (d.trandate = d1.trandate AND d.rte = d1.rte ) AND d1.readflag = '1' and d1.COMMENT = '99' and d1.BR = "+br+" )  ";
		sql += "          AS abnormalcount, ";
		sql += "       (SELECT count( * ) ";
		sql += "        FROM detail d1 ";
		sql += "        WHERE (d.trandate = d1.trandate AND d.rte = d1.rte ) AND d1.readflag = '0' and d1.COMMENT = '999' and d1.BR = "+br+" )  ";
		sql += "          AS remaincount, ";
		sql += "       (SELECT count( * ) ";
		sql += "        FROM detail d1 ";
		sql += "        WHERE (d.trandate = d1.trandate AND d.rte = d1.rte ) AND d1.billflag != 'Y' and d1.BR = "+br+" )  ";
		sql += "          AS nobillcount ";
		sql += "FROM detail d ";
		sql += DBHelper.getConStr(c);
		sql += "GROUP BY trandate, codeid,rte ";
		sql += "ORDER BY trandate, codeid,rte ";

		ReportHelper.getReportSummaryViewList(sql, c, r);
		log.debug(m.took());
		return r;
	}

	@Override
	public void refreshPag(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		String br = (String)session.getAttribute("br");
		TreeMap c = (TreeMap) session.getAttribute("reportSummaryCriteria");
		ArrayList reportViewList = getReportViewList(c,br); // re-search
		ReportNormalViewPaging p = new ReportNormalViewPaging();
		p.load(reportViewList);
		session.setAttribute("pageObj", p);

	}

	// replace pageObj: work around when back from normal report because pageObj is shared name
	// public void modPaging(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
	// HttpSession session = request.getSession();
	//
	// ReportHelper.refreshPageObj(mapping, form, request, response, this);
	// // this maybe obsoletet because refresh so can remove
	// // log.debug("replace pageObj with summaryPageObj");
	// // Paging summaryPaging = (Paging) session.getAttribute("summaryPageObj");
	// // session.setAttribute("pageObj", summaryPaging);
	//
	// }

}