/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.pwa.web.struts.action;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.TreeMap;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.PairValueDesc;
import com.pwa.common.CUtil;
import com.pwa.common.DateUtil;
import com.pwa.common.MessageList;
import com.pwa.common.Meter;
import com.pwa.common.exception.CMException;
import com.pwa.data.DBHelper;
import com.pwa.web.Paging;
import com.pwa.web.ScreenMsgUtil;
import com.pwa.web.helper.ReportHelper;
import com.pwa.web.helper.WebUtil;
import com.pwa.web.struts.form.ReportAbNormalForm;
import com.pwa.web.view.ReportNormalViewPaging;

public class ReportAbNormalAction extends ReportBaseAction {
	public static Logger log = Logger.getLogger(ReportAbNormalAction.class);

	public ActionForward main(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		ReportAbNormalForm f = (ReportAbNormalForm) form;
		log.debug("enter ");

		// set current date
		if (CUtil.isBlank(f.getDateStr())) {
			f.setDateStr(DateUtil.formatLongThaiDate(new Date()));
		}
		if (CUtil.isBlank(f.getDatetoStr())) {
			f.setDatetoStr(DateUtil.formatLongThaiDate(new Date()));
		}

		// lookup list
		ArrayList<PairValueDesc> codeIDList = WebUtil.getCodeIDList((String)session.getAttribute("br"));
		session.setAttribute("codeIDList", codeIDList);
		ArrayList<PairValueDesc> abNormalTypeList = WebUtil.getAbNormalType();
		session.setAttribute("abNormalTypeList", abNormalTypeList);

		return mapping.findForward("main");
	}

	public ActionForward submit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IOException, ServletException {

		HttpSession session = request.getSession();
		ReportAbNormalForm f = (ReportAbNormalForm) form;
		MessageList msgList = new MessageList();
		log.debug("enter");
		try {
			ReportHelper.decodeISOForm(mapping, form, request, response);
			String abNomalType = f.getAbnormaltype();
			String startdateStr = f.getDateStr();
			String todateStr = f.getDatetoStr();
			String br = (String)session.getAttribute("br");
			TreeMap c = getReportCriteriaANdValidate(f,br);
			// store to refresh
			session.setAttribute("reportCriteria", c);
			session.setAttribute("abNomalType", abNomalType);

			ArrayList reportViewList = getReportViewList(c, abNomalType);

			request.setAttribute("type", abNomalType);
			request.setAttribute("startdate", DateUtil.formatThaiDate(DateUtil.parseThaiDate(startdateStr)));
			request.setAttribute("todate", DateUtil.formatThaiDate(DateUtil.parseThaiDate(todateStr)));

			ReportNormalViewPaging p = new ReportNormalViewPaging();
			p.load(reportViewList);
			session.setAttribute("pageObj", p);

			session.setAttribute("reportViewList", reportViewList);
		} catch (Exception e) {
			msgList.addMessage(e);
			if (!(e instanceof CMException)) {
				e.printStackTrace();
			}
		}

		ActionForward forward = null;
		if (!msgList.isContainError()) {
			forward = mapping.findForward("success");
		} else {
			forward = mapping.findForward("main");
		}
		saveMessages(request, ScreenMsgUtil.getMsgsToScreen(msgList));
		return forward;
	}

	public static TreeMap getReportCriteriaANdValidate(ReportAbNormalForm f,String br) throws Exception {
		TreeMap c = new TreeMap();

		String codeid = f.getCodeid();
		String startdateStr = f.getDateStr();
		String todateStr = f.getDatetoStr();
		log.debug("codeid=" + codeid + ", startdateStr=" + startdateStr + ", todateStr=" + todateStr+ ", br=" + br);

		codeid = CUtil.getNullIfEmpty(codeid);
		startdateStr = CUtil.getNullIfEmpty(startdateStr);
		todateStr = CUtil.getNullIfEmpty(todateStr);
		br = CUtil.getNullIfEmpty(br);
		// validate input
		if (CUtil.isBlank(startdateStr) || CUtil.isBlank(todateStr)) {
			throw new CMException("E",  "กรุณาเลือกวันที่ให้ครบ" );
		}
		Date startdate = DateUtil.parseThaiDate(startdateStr);
		Date todate = DateUtil.parseThaiDate(todateStr);
		if (startdate.after(todate)) {
			throw new CMException("E",  "กรุณาเลือกวันที่ให้ถูกต้อง" );
		}

		DBHelper.putToCriIfNotNull(c, "codeid", codeid);
		DBHelper.putToCriIfNotNull(c, "PRSMTRRDDT", new Date[] { startdate, todate });
		DBHelper.putToCriIfNotNull(c, "d.br", br);
		return c;
	}

	public ArrayList getReportViewList(TreeMap c, String type) throws Exception {
		ArrayList r = new ArrayList();
		Meter m = new Meter();
		String percent = "";
		if ("1".equals(type)) {
			percent = " ( HLN = 'VH' OR HLN = 'H' ) ";
		} else if ("2".equals(type)) {
			percent = " ( HLN = 'VL' OR HLN = 'L' ) ";
		} else if ("3".equals(type)) {
			percent = " NEWCONS= 0 ";
		} else if ("4".equals(type)) {
			percent = " COMMENT = '15' ";
		}
		r = getReportAbNormalViewList(c, percent);
		log.debug(m.took());
		return r;
	}

	public ArrayList getReportAbNormalViewList(TreeMap c, String percent) throws Exception {
		ArrayList r = new ArrayList();
		String sql = "";
		sql += " SELECT *,( if(AVGWTUSG=0 ,0, (( NEWCONS-AVGWTUSG )/AVGWTUSG)*100)) as DIFF";
		sql += " FROM detail AS d inner join dbst44 db44 on d.codeid = db44.MTRRDRCODE";
		sql += " WHERE " + percent;
		sql += " and readflag='1' ";
		sql += DBHelper.getAndIfCond(DBHelper.getConStr(c, false));
		sql += " ORDER BY abs(DIFF) DESC";
		ReportHelper.getReportAbNormalViewList(sql, c, r);

		return r;
	}

	public void refreshPag(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		TreeMap c = (TreeMap) session.getAttribute("reportCriteria");
		ArrayList reportViewList = getReportViewList(c, (String) session.getAttribute("abNomalType")); // re-search
		ReportNormalViewPaging p = new ReportNormalViewPaging();
		p.load(reportViewList);
		session.setAttribute("pageObj", p);
	}



}