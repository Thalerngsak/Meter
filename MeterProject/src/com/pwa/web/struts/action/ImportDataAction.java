/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.pwa.web.struts.action;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import com.PairValueDesc;
import com.importpwa.common.RunMeTask;
import com.pwa.common.CUtil;
import com.pwa.common.Env;
import com.pwa.common.FileUtil;
import com.pwa.common.MessageList;
import com.pwa.common.Meter;
import com.pwa.common.exception.CMException;
import com.pwa.data.impoter.DataImporter;
import com.pwa.web.ScreenMsgUtil;
import com.pwa.web.helper.WebUtil;
import com.pwa.web.struts.form.ImportDataForm;

public class ImportDataAction extends BaseAction {
	public static Logger log = Logger.getLogger(ImportDataAction.class);

	public ActionForward main(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		log.debug("enter ");
		HttpSession session = request.getSession();

		// lookup List
		ArrayList<PairValueDesc> zoneList = WebUtil.getZoneList();
		session.setAttribute("zoneList", zoneList);
		ArrayList<PairValueDesc> branchList = WebUtil.getBranchList();
		session.setAttribute("branchList", branchList);

		ArrayList<PairValueDesc> dayList = WebUtil.getDayList();
		session.setAttribute("dayList", dayList);
		ArrayList<PairValueDesc> monthList = WebUtil.getMonthList();
		session.setAttribute("monthList", monthList);
		ArrayList<PairValueDesc> yearList = WebUtil.getYearList();
		session.setAttribute("yearList", yearList);

		ArrayList<PairValueDesc> codeIDList = WebUtil.getCodeIDList((String)session.getAttribute("br"));
		session.setAttribute("codeIDList", codeIDList);

		session.setAttribute("state", "init");
		return mapping.findForward("main");
	}

	public ActionForward check(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IOException, ParseException {
		HttpSession session = request.getSession();
		ImportDataForm f = (ImportDataForm) form;
		MessageList msgList = new MessageList();
		Meter m = new Meter();
		WebUtil.setupDefaultProgressManager(session); // setup progress
		
		log.debug("enter");
		String codeid = f.getCodeid();
		log.debug("codeid=" + codeid);
		codeid = CUtil.getNullIfEmpty(codeid);

		FormFile formFile = f.getAssignFile();
		ArrayList importDataInputList = new ArrayList();
		File importFile = null;
		try {
			WebUtil.validateFileInfo(formFile);
			String fileName = formFile.getFileName();
			byte[] fileData = formFile.getFileData();
			String tranDate = "";
			if(fileName != null){
				tranDate = fileName.substring(11, 17);
				log.debug("tranDate = "+tranDate);
			}
			//log.debug(new String(fileData));
			f.setFilename(fileName);
			fileName = FileUtil.changeFileName(fileName);
			importFile = FileUtil.createFile(Env.get("meter.datadir") + "/import/" + fileName, fileData); // change fiel dynamic na
			// check file and log (codename, rte count, trandate)
			importDataInputList = DataImporter.logFileInfoAndGetInputList(importFile.getAbsolutePath(),tranDate, msgList);

		} catch (CMException e) {
			msgList.addMessage(e);
		} catch (Exception e) {
			msgList.addMessage(e);
			e.printStackTrace();
		}finally{
			log.debug(m.took());
			WebUtil.removeProgressManager(session);
		}
		ActionForward forward = null;
		if (!msgList.isContainError()) {
			session.setAttribute("state", "checked");
			session.setAttribute("importDataInputList", importDataInputList);
			forward = mapping.findForward("success");
		} else {
			forward = mapping.findForward("main");
		}
		saveMessages(request, ScreenMsgUtil.getMsgsToScreen(msgList));
		return forward;
	}

	public ActionForward submit(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IOException, ParseException {
		HttpSession session = request.getSession();
		ImportDataForm f = (ImportDataForm) form;
		MessageList msgList = new MessageList();
		Meter m = new Meter();
		WebUtil.setupDefaultProgressManager(session); // setup progress
		
		log.debug("enter");
		String codeid = f.getCodeid();
		log.debug("codeid=" + codeid);
		codeid = CUtil.getNullIfEmpty(codeid);

		ArrayList importDataInputList = new ArrayList();
		try {

			importDataInputList = (ArrayList) session.getAttribute("importDataInputList");
			long rowEffect =DataImporter.run(importDataInputList, msgList);
			msgList.addFirstMessage("I","Import ข้อมูลสำเร็จ" );
		} catch (CMException e) {
			msgList.addMessage(e);
		} catch (Exception e) {
			msgList.addMessage(e);
			e.printStackTrace();
		}finally{
			log.debug(m.took());
			WebUtil.removeProgressManager(session);
		}
		ActionForward forward = null;
		if (!msgList.isContainError()) {
			session.setAttribute("state", "submited");
			session.removeAttribute("importDataInputList");
			forward = mapping.findForward("success");
		} else {
			forward = mapping.findForward("main");
		}
		saveMessages(request, ScreenMsgUtil.getMsgsToScreen(msgList));
		return forward;
	}
	public ActionForward manual(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IOException, ParseException {
		
		RunMeTask.execute();
		
		ActionForward forward = mapping.findForward("main");
		
		return forward;
	}

}